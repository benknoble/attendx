#! /usr/bin/env bash

set -euo pipefail

log() {
  printf '%s\n' "$@"
} >&2

usage() {
  cat <<DOG
usage: $0 [-a|--all|dupes|count]

Input: CSV like output of ./scripts/merge_csv

Output:
  - all ids given no arguments (not deduplicated)
  - given dupes, shows duplicate ids with counts
  - given count, shows count of unique ids
  - given --all or -a, shows all available statistics (except just showing ids)
DOG
}

die() {
  local ex="${1:-1}"
  exit "$ex"
}

usage_and_die() { usage && die; }

ids() {
  sed '1d' | awk -F, '{print $1}'
}

dupes() {
  ids | uniq -c | awk '$1 > 1'
}

count() {
  ids | uniq | wc -l
}

functions=(
  dupes
  count
)

all() {
  local tmpdir
  tmpdir="$(mktemp -d)"
  trap "rm -rf -- $tmpdir" EXIT
  local file="$tmpdir/input"
  cat > "$file"
  for func in "${functions[@]}" ; do
    echo "$func"
    "$func" <"$file"
  done
}

main() {
  case $# in
    0) ids ;;
    1)
      case "$1" in
        -h|--help) usage_and_die ;;
        -a|--all) all ;;
        dupes|count) "$1" ;;
        *) usage_and_die ;;
      esac
      ;;
    *) usage_and_die ;;
  esac
}

main "$@"
