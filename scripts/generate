#! /usr/bin/env bash

set -euo pipefail

log() {
  printf '%s\n' "$@"
} >&2

usage() {
  cat <<DOG
usage: $0 [-t title] [-i template.html] file...

Outputs an attendx html file with
  - data set to an array of JSON objects from the semi-colon SV data in file...
    - format of file: "NAME";ID
      - I use semi-colons because NAME often contains commas (and I really don't
        want to do full-blown CSV parsing)
      - note the quotes--those are on you
  - <title> and friends are set if 'title' is given

Template can be given with -i:
  - place the markers DATA and END_DATA at the point where the JSON objects
    should be placed
  - all lines containing 'Attendx' will be replaced with 'title' if given
DOG
}

die() {
  local ex="${1:-1}"
  exit "$ex"
}

usage_and_die() { usage && die; }

data() {
    for f ; do
      while IFS=';' read -r name id ; do
        printf "{ name: %s, id: %d },\n" "$name" "$id"
      done < <(sed '1d' "$f")
    done
}

main() {
  if (($# < 1)) ; then
    usage_and_die
  fi

  local template=template.html
  local filter=(cat)

  while getopts 't:i:' opt ; do
    case "$opt" in
      t)
        filter=(
          sed "s/Attendx/$OPTARG/g"
        )
        ;;
      i)
        template="$OPTARG"
        ;;
      ?)
        usage_and_die
        ;;
      *)
        log "Unsupported option"
        usage_and_die
        ;;
    esac
  done
  shift $((OPTIND-1))

  if (($# < 1)) ; then
    usage_and_die
  fi

  {
    sed '/DATA/,$d' template.html
    data "$@"
    sed '1,/END_DATA/d' template.html
  } | "${filter[@]}"
}

main "$@"
